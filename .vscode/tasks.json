/**
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Compile", // 这是项目执行名称，必须与launch.json的preLaunchTask相同
            "command": "D:/software/mingw64/bin/g++", // 指定编译器，我用的mingw64编译，安装目录我放在G盘，你需要根据自己的情况更改
            "args": [
                "${workspaceFolder}\\*.cpp",
                "-o",
                "${workspaceFolder}\\${workspaceFolderBasename}.exe",
                "-g"
            ], //这里的*.cpp是关键
            // args是编译指令的参数，注意"-o"后面的那个参数，指定了输出可执行文件的存放位置，这个参数必须与launch.json的program相同
            "type": "shell", // process和shell，我用了shell，具体参见VSCode官方文档
            "options": {
                "cwd": "D:/software/mingw64/bin/" //指定编译器工作目录，和minGW配置的环境变量相同
            },
            "problemMatcher": [
                "$gcc"
            ], // (可选)用于捕捉编译时终端的报错信息
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always", // 执行任务时跳转到终端
                "focus": false, // C/C++必须设为false
                "panel": "shared" // 编译信息只使用一个终端面板
            }
        }
    ]
}
**/


{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Compile", // 任务名称，与launch.json的preLaunchTask相对应
            "command": "g++", // 要使用的编译器，C++用g++
            "args": [
                "${file}",
                // "${workspaceFolder}\\*.cpp",
                "-o", // 指定输出文件名，不加该参数则默认输出a.exe，Linux下默认a.out
                "${fileDirname}/${fileBasenameNoExtension}.exe",
                "-g", // 生成和调试有关的信息
                "-m64", // 不知为何有时会生成16位应用而无法运行，加上此条可强制生成64位的
                "-Wall", // 开启额外警告
                "-static-libgcc", // 静态链接libgcc，一般都会加上
                "-fexec-charset=GBK", // 生成的程序使用GBK编码，不加这条会导致Win下输出中文乱码；繁体系统改成BIG5
                // "-std=c11", // 要用的语言标准，根据自己的需要修改。c++可用c++14
            ], // 编译的命令，其实相当于VSC帮你在终端中输了这些东西
            "type": "process", // process是把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍
            "group": {
                "kind": "build",
                "isDefault": true // 不为true时ctrl shift B就要手动选择了
            },
            "presentation": {
                "echo": true,
                "reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档
                "focus": false, // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
                "panel": "shared" // 不同的文件的编译信息共享一个终端面板
            },
            "problemMatcher": "$gcc" // 捕捉编译时终端里的报错信息到问题面板中，修改代码后需要重新编译才会再次触发
            // 本来有Lint，再开problemMatcher就有双重报错，但MinGW的Lint效果实在太差了；用Clang可以注释掉
        }
    ]
}
